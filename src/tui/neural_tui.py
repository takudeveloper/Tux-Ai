"""
TUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é Tux AI
"""

import sys
from pathlib import Path

project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

try:
    from textual import on, work
    from textual.app import App, ComposeResult
    from textual.containers import Container, ScrollableContainer, Horizontal, Vertical, Grid
    from textual.widgets import (
        Header, Footer, Input, Button, Static, Markdown, 
        TabbedContent, TabPane, Label, ListView, ListItem, 
        LoadingIndicator, ProgressBar, RichLog, DataTable, SelectionList
    )
    from textual.reactive import reactive
    from textual.binding import Binding
    
    from src.core.tux_neural_network import TuxAICore, demonstrate_tux_ai
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

class NeuronVisualization(Static):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ä–æ–Ω–æ–≤"""
    
    def render(self) -> str:
        app = self.app
        if hasattr(app, 'tux_core'):
            stats = app.tux_core.main_network.get_neuron_statistics()
            if "error" not in stats:
                active = stats["active_neurons"]
                total = stats["total_neurons"]
                distribution = stats["activation_distribution"]
                
                return f"""
üß† –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ–π—Ä–æ–Ω–æ–≤: {active}/{total}

üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:
  üî¥ –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è: {distribution['very_low']}
  üü° –ù–∏–∑–∫–∞—è: {distribution['low']}  
  üü¢ –°—Ä–µ–¥–Ω—è—è: {distribution['medium']}
  üîµ –í—ã—Å–æ–∫–∞—è: {distribution['high']}

üìà –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è: {stats['avg_activation']:.3f}
                """
        return "üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"

class TrainingProgress(Static):
    """–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è"""
    
    progress = reactive(0)
    status = reactive("–ì–æ—Ç–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é")
    
    def render(self) -> str:
        if self.progress == 0:
            return f"üéì {self.status}"
        else:
            return f"üéì {self.status} [{self.progress}%]"

class NeuralTuxTUI(App):
    """
    TUI –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ Tux AI
    """
    
    CSS = """
    Screen {
        background: #121212;
        color: #e0e0e0;
    }
    
    Header {
        background: #000000;
        color: #4caf50;
        text-style: bold;
        border-bottom: heavy #4caf50;
        padding: 0 1;
    }
    
    Footer {
        background: #000000;
        border-top: heavy #4caf50;
        padding: 0 1;
    }
    
    TabbedContent {
        height: 100%;
    }
    
    TabPane {
        padding: 1;
    }
    
    .section-title {
        text-style: bold;
        color: #ff4081;
        margin-bottom: 1;
        background: #4caf50 10%;
        padding: 1;
        border: solid #4caf50;
    }
    
    .neuron-viz {
        background: #2d2d2d;
        padding: 1;
        margin: 1 0;
        border: solid #9c27b0;
    }
    
    .status-panel {
        layout: horizontal;
        height: auto;
        margin: 1 0;
    }
    
    .status-widget {
        background: #2d2d2d;
        padding: 1;
        margin: 0 1;
        border: solid #ff9800;
        width: 1fr;
    }
    
    .log-container {
        height: 10;
        border: solid #2196f3;
        background: #1e1e1e;
        padding: 1;
        margin: 1 0;
    }
    
    .chat-container {
        height: 20;
        border: solid #4caf50;
        background: #1e1e1e;
        padding: 1;
        margin: 1 0;
    }
    
    Button {
        margin: 0 1;
    }
    
    Button:focus {
        border: double #4caf50;
    }
    
    Button#train_button {
        background: #ff9800;
        color: black;
    }
    
    Button#analyze_image {
        background: #9c27b0;
        color: white;
    }
    
    Button#analyze_text {
        background: #2196f3;
        color: white;
    }
    
    Input {
        width: 1fr;
        margin-right: 1;
        background: #1e1e1e;
        border: solid #4caf50;
    }
    
    ProgressBar {
        height: 1;
        margin: 1 0;
    }
    
    ProgressBar .progress-bar--bar {
        background: #4caf50;
    }
    
    Grid {
        grid-size: 2;
        grid-gutter: 1;
    }
    """
    
    BINDINGS = [
        ("q", "quit", "–í—ã—Ö–æ–¥"),
        ("d", "toggle_dark", "–¢–µ–º–∞"),
        ("n", "focus_neurons", "–ù–µ–π—Ä–æ–Ω—ã"),
        ("t", "focus_training", "–û–±—É—á–µ–Ω–∏–µ"),
        ("a", "focus_analysis", "–ê–Ω–∞–ª–∏–∑"),
        ("r", "refresh_stats", "–û–±–Ω–æ–≤–∏—Ç—å"),
    ]
    
    def __init__(self):
        super().__init__()
        self.tux_core = TuxAICore()
        self.training_in_progress = False
    
    def compose(self) -> ComposeResult:
        yield Header()
        
        with TabbedContent(initial="neurons"):
            # –í–∫–ª–∞–¥–∫–∞ –Ω–µ–π—Ä–æ–Ω–æ–≤
            with TabPane("üß† –ù–µ–π—Ä–æ–Ω—ã", id="neurons"):
                yield Container(
                    NeuronVisualization(classes="neuron-viz"),
                    Label("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏", classes="section-title"),
                    Grid(
                        Container(
                            Label("–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç—å"),
                            RichLog(id="main_network_log", classes="log-container"),
                        ),
                        Container(
                            Label("–í–∏–∑—É–∞–ª—å–Ω–∞—è —Å–µ—Ç—å"),
                            RichLog(id="vision_network_log", classes="log-container"),
                        ),
                    ),
                    Horizontal(
                        Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", id="refresh_stats"),
                        Button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", id="save_model"),
                        Button("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å", id="load_model"),
                        id="neuron_actions"
                    ),
                    id="neurons_tab"
                )
            
            # –í–∫–ª–∞–¥–∫–∞ –æ–±—É—á–µ–Ω–∏—è
            with TabPane("üéì –û–±—É—á–µ–Ω–∏–µ", id="training"):
                yield Container(
                    Label("üéì –û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏", classes="section-title"),
                    Horizontal(
                        Button("üñºÔ∏è –û–±—É—á–∏—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö", id="train_images", variant="warning"),
                        Button("üìö –û–±—É—á–∏—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç–∞—Ö", id="train_texts"),
                        Button("üîÑ –î–µ–º–æ-–æ–±—É—á–µ–Ω–∏–µ", id="demo_train", variant="success"),
                        id="training_buttons"
                    ),
                    TrainingProgress(classes="status-widget"),
                    ProgressBar(total=100, show_eta=False, id="training_progress"),
                    RichLog(id="training_log", classes="log-container"),
                    id="training_tab"
                )
            
            # –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
            with TabPane("üîç –ê–Ω–∞–ª–∏–∑", id="analysis"):
                yield Container(
                    Label("üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", classes="section-title"),
                    Horizontal(
                        Button("üìÅ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", id="analyze_image", variant="primary"),
                        Button("üîÑ –î–µ–º–æ-–∞–Ω–∞–ª–∏–∑", id="demo_analyze"),
                        id="image_analysis"
                    ),
                    RichLog(id="image_log", classes="log-container"),
                    
                    Label("üí¨ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", classes="section-title"),
                    Horizontal(
                        Input(placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...", id="text_input"),
                        Button("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", id="analyze_text"),
                        id="text_analysis"
                    ),
                    RichLog(id="text_log", classes="log-container"),
                    id="analysis_tab"
                )
            
            # –í–∫–ª–∞–¥–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            with TabPane("‚ÑπÔ∏è –û —Å–µ—Ç–∏", id="info"):
                yield Container(
                    Markdown("""
# üß† Tux AI Neural Network

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–µ—Ç–∏:
- **1000 —Ç–æ—á–Ω–æ –Ω–µ–π—Ä–æ–Ω–æ–≤** –≤ —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ—è—Ö
- **5 –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã—Ö —Å–ª–æ–µ–≤**: 400 -> 300 -> 200 -> 100 -> –≤—ã—Ö–æ–¥
- **–§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏**: ReLU
- **Dropout**: 0.2 –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- üñºÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** —á–µ—Ä–µ–∑ —Å–≤–µ—Ä—Ç–æ—á–Ω—É—é —Å–µ—Ç—å
- üí¨ **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞** —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ—Ç—å  
- üéì **–û–±—É—á–µ–Ω–∏–µ** –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- üìä **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è** –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ä–æ–Ω–æ–≤

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:
- **–í—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä**: 784 (28x28 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç)
- **–í—ã—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä**: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
- **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã**: ~500,000 –æ–±—É—á–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- **–†–µ–∞–ª–∏–∑–∞—Ü–∏—è**: Pure PyTorch

## –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:
- **Q** - –í—ã—Ö–æ–¥
- **D** - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
- **N** - –ù–µ–π—Ä–æ–Ω—ã
- **T** - –û–±—É—á–µ–Ω–∏–µ  
- **A** - –ê–Ω–∞–ª–∏–∑
- **R** - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–º–æ-–æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
3. –ò–∑—É—á–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ–π—Ä–æ–Ω–æ–≤
4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                    """),
                    id="info_tab"
                )
        
        yield Footer()
    
    def on_mount(self) -> None:
        self.title = "üß† Tux AI Neural Network - 1000 –ù–µ–π—Ä–æ–Ω–æ–≤"
        self.sub_title = "–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._initialize_networks()
    
    def _initialize_networks(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π"""
        log = self.query_one("#main_network_log", RichLog)
        log.write("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π...")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç—è—Ö
        info = self.tux_core.get_network_info()
        
        log.write("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        log.write(f"üìä –ù–µ–π—Ä–æ–Ω–æ–≤: {info['main_network']['total_neurons']}")
        log.write(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {info['main_network']['parameters']}")
        
        vision_log = self.query_one("#vision_network_log", RichLog)
        vision_log.write("‚úÖ –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        vision_log.write(f"üìä –°–≤–µ—Ä—Ç–æ—á–Ω—ã—Ö —Å–ª–æ–µ–≤: {info['vision_network']['conv_layers']}")
        vision_log.write(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {info['vision_network']['parameters']}")
    
    @on(Button.Pressed, "#refresh_stats")
    def on_refresh_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self._initialize_networks()
        self.notify("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    @on(Button.Pressed, "#demo_train")
    def on_demo_train(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
        if self.training_in_progress:
            self.notify("‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ —É–∂–µ –∏–¥–µ—Ç...")
            return
        
        self.training_in_progress = True
        progress = self.query_one("#training_progress", ProgressBar)
        status = self.query_one(TrainingProgress)
        log = self.query_one("#training_log", RichLog)
        
        status.status = "–î–µ–º–æ-–æ–±—É—á–µ–Ω–∏–µ..."
        progress.update(progress=25)
        log.write("üéì –ù–∞—á–∏–Ω–∞—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ...")
        
        @work
        async def training_task():
            try:
                # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
                for i in range(5):
                    await asyncio.sleep(1)
                    progress.advance(15)
                    log.write(f"üìö –≠–ø–æ—Ö–∞ {i+1}/5: –æ–±—É—á–µ–Ω–∏–µ...")
                
                # –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–µ–º–æ-–æ–±—É—á–µ–Ω–∏—è
                result = await asyncio.to_thread(
                    self.tux_core.train_on_images, "demo", 3
                )
                
                if result["success"]:
                    status.status = "–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
                    progress.update(progress=100)
                    log.write("‚úÖ –î–µ–º–æ-–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                    log.write(f"üìä –¶–∏–∫–ª–æ–≤ –æ–±—É—á–µ–Ω–∏—è: {result['training_cycles']}")
                    log.write(f"üìâ –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏: {result['final_loss']:.4f}")
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–π—Ä–æ–Ω–æ–≤
                    self._initialize_networks()
                    
                    self.notify("üéì –î–µ–º–æ-–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                else:
                    status.status = "–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è"
                    progress.update(progress=0)
                    log.write(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    self.notify("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
                
            except Exception as e:
                status.status = "–û—à–∏–±–∫–∞"
                progress.update(progress=0)
                log.write(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
                self.notify(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            
            finally:
                self.training_in_progress = False
        
        training_task()
    
    @on(Button.Pressed, "#analyze_text")
    @on(Input.Submitted, "#text_input")
    def on_analyze_text(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        text_input = self.query_one("#text_input", Input)
        text = text_input.value.strip()
        
        if not text:
            self.notify("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        text_input.value = ""
        
        log = self.query_one("#text_log", RichLog)
        log.write(f"üí¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç: '{text}'")
        
        @work
        async def analysis_task():
            try:
                result = await asyncio.to_thread(self.tux_core.analyze_text, text)
                
                if result["success"]:
                    log.write("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
                    log.write(f"üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {result['sentiment']:.2f} (0-1, –≥–¥–µ 1 - –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ)")
                    log.write(f"üìà –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result['complexity']:.2f} (0-1, –≥–¥–µ 1 - —Å–ª–æ–∂–Ω—ã–π)")
                    log.write(f"üìè –î–ª–∏–Ω–∞: {result['text_length']} —Å–∏–º–≤–æ–ª–æ–≤, {result['words_count']} —Å–ª–æ–≤")
                    
                    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
                    sentiment_desc = "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π" if result['sentiment'] > 0.6 else "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π" if result['sentiment'] < 0.4 else "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
                    complexity_desc = "—Å–ª–æ–∂–Ω—ã–π" if result['complexity'] > 0.6 else "–ø—Ä–æ—Å—Ç–æ–π" if result['complexity'] < 0.4 else "—Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
                    
                    log.write(f"üéØ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {sentiment_desc}, {complexity_desc}")
                    
                else:
                    log.write(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    
            except Exception as e:
                log.write(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        analysis_task()
    
    @on(Button.Pressed, "#demo_analyze")
    def on_demo_analyze(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        sample_texts = [
            "Tux AI - —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å —Å 1000 –Ω–µ–π—Ä–æ–Ω–æ–≤!",
            "–Ø –Ω–µ –æ—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.",
            "–°–ª–æ–∂–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.",
            "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –æ—Å–æ–±–æ–≥–æ —Å–º—ã—Å–ª–∞."
        ]
        
        import random
        text = random.choice(sample_texts)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ input –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        text_input = self.query_one("#text_input", Input)
        text_input.value = text
        self.on_analyze_text()
    
    @on(Button.Pressed, "#save_model")
    def on_save_model(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        log = self.query_one("#main_network_log", RichLog)
        log.write("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –º–æ–¥–µ–ª—å...")
        
        result = self.tux_core.save_model()
        
        if result["success"]:
            log.write("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            log.write(f"üìÅ –ü—É—Ç—å: {result['path']}")
            self.notify("üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        else:
            log.write(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            self.notify("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    @on(Button.Pressed, "#load_model")
    def on_load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
        log = self.query_one("#main_network_log", RichLog)
        log.write("üì• –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å...")
        
        result = self.tux_core.load_model()
        
        if result["success"]:
            log.write("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            log.write(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑: {result['loaded_from']}")
            self._initialize_networks()
            self.notify("üì• –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        else:
            log.write(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            self.notify("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
    
    def action_focus_neurons(self):
        self.query_one(TabbedContent).active = "neurons"
        self.notify("üß† –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –Ω–µ–π—Ä–æ–Ω—ã")
    
    def action_focus_training(self):
        self.query_one(TabbedContent).active = "training"
        self.notify("üéì –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ")
    
    def action_focus_analysis(self):
        self.query_one(TabbedContent).active = "analysis"
        self.notify("üîç –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑")
    
    def action_refresh_stats(self):
        self._initialize_networks()
        self.notify("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

def main():
    """–ó–∞–ø—É—Å–∫ –Ω–µ–π—Ä–æ–Ω–Ω–æ–≥–æ TUI"""
    try:
        app = NeuralTuxTUI()
        app.run()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîß –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω PyTorch: pip install torch")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU/CUDA")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–º–æ: python -c 'from src.core.tux_neural_network import demonstrate_tux_ai; demonstrate_tux_ai()'")

if __name__ == "__main__":
    main()