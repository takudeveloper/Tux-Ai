"""
–ì–ª–∞–≤–Ω—ã–π TUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Tux AI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–ª–∞–≥–∏–Ω–æ–≤ –∏ –ø–∞–º—è—Ç–∏
"""

import sys
import asyncio
from pathlib import Path

project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

try:
    from textual import on, work
    from textual.app import App, ComposeResult
    from textual.containers import Container, ScrollableContainer, Horizontal, Vertical, Grid
    from textual.widgets import (
        Header, Footer, Input, Button, Static, Markdown, 
        TabbedContent, TabPane, Label, ListView, ListItem, 
        LoadingIndicator, ProgressBar, RichLog, DataTable, SelectionList,
        Switch, Select, TextArea
    )
    from textual.reactive import reactive
    from textual.binding import Binding
    
    from src.core.model_engine import TuxModelEngine, SimpleFallbackModel
    from src.core.training_system import TrainingSystem
    from src.core.file_manager import FileManager
    from src.core.memory_system import MemorySystem
    from src.core.plugin_system import PluginManager
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install textual rich transformers torch scikit-learn")
    sys.exit(1)

class PluginStatus(Static):
    """–°—Ç–∞—Ç—É—Å –ø–ª–∞–≥–∏–Ω–æ–≤"""
    
    def render(self) -> str:
        app = self.app
        if hasattr(app, 'plugin_manager'):
            enabled_plugins = sum(1 for p in app.plugin_manager.plugins.values() if p.enabled)
            return f"üîå –ü–ª–∞–≥–∏–Ω—ã: {enabled_plugins}/{len(app.plugin_manager.plugins)} –∞–∫—Ç–∏–≤–Ω—ã"
        return "üîå –ü–ª–∞–≥–∏–Ω—ã: –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"

class MemoryStatus(Static):
    """–°—Ç–∞—Ç—É—Å –ø–∞–º—è—Ç–∏"""
    
    def render(self) -> str:
        app = self.app
        if hasattr(app, 'memory_system'):
            return "üß† –ü–∞–º—è—Ç—å: –∞–∫—Ç–∏–≤–Ω–∞"
        return "üß† –ü–∞–º—è—Ç—å: –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"

class AdvancedTuxAITUI(App):
    """
    üêß –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π TUX AI TUI
    –° –ø–ª–∞–≥–∏–Ω–∞–º–∏, –ø–∞–º—è—Ç—å—é –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    """
    
    CSS = """
    Screen {
        background: #121212;
        color: #e0e0e0;
    }
    
    Header {
        background: #000000;
        color: #4caf50;
        text-style: bold;
        border-bottom: heavy #4caf50;
        padding: 0 1;
    }
    
    Footer {
        background: #000000;
        border-top: heavy #4caf50;
        padding: 0 1;
    }
    
    TabbedContent {
        height: 100%;
    }
    
    TabPane {
        padding: 1;
    }
    
    .section-title {
        text-style: bold;
        color: #ff4081;
        margin-bottom: 1;
        background: #4caf50 10%;
        padding: 1;
        border: solid #4caf50;
    }
    
    .status-panel {
        layout: horizontal;
        height: auto;
        margin: 1 0;
    }
    
    .status-widget {
        background: #2d2d2d;
        padding: 1;
        margin: 0 1;
        border: solid #ff9800;
        width: 1fr;
    }
    
    .log-container {
        height: 10;
        border: solid #2196f3;
        background: #1e1e1e;
        padding: 1;
        margin: 1 0;
    }
    
    .chat-container {
        height: 20;
        border: solid #4caf50;
        background: #1e1e1e;
        padding: 1;
        margin: 1 0;
    }
    
    .plugin-container {
        border: solid #9c27b0;
        background: #1e1e1e;
        padding: 1;
        margin: 1 0;
    }
    
    Button {
        margin: 0 1;
    }
    
    Button:focus {
        border: double #4caf50;
    }
    
    Button#send_button {
        background: #4caf50;
        color: white;
    }
    
    Button#train_button {
        background: #ff9800;
        color: black;
    }
    
    Button#load_model {
        background: #2196f3;
        color: white;
    }
    
    Button#plugin_button {
        background: #9c27b0;
        color: white;
    }
    
    Input {
        width: 1fr;
        margin-right: 1;
        background: #1e1e1e;
        border: solid #4caf50;
    }
    
    ProgressBar {
        height: 1;
        margin: 1 0;
    }
    
    ProgressBar .progress-bar--bar {
        background: #4caf50;
    }
    
    ListView {
        height: 12;
        border: solid #2196f3;
        background: #1e1e1e;
        margin: 1 0;
    }
    
    ListItem {
        padding: 1;
    }
    
    ListItem:hover {
        background: #4caf50 20%;
    }
    
    Switch:checked {
        background: #4caf50;
    }
    
    Grid {
        grid-size: 2;
        grid-gutter: 1;
    }
    """
    
    BINDINGS = [
        ("q", "quit", "–í—ã—Ö–æ–¥"),
        ("d", "toggle_dark", "–¢–µ–º–∞"),
        ("f", "focus_files", "–§–∞–π–ª—ã"),
        ("t", "focus_training", "–û–±—É—á–µ–Ω–∏–µ"),
        ("c", "focus_chat", "–ß–∞—Ç"),
        ("p", "focus_plugins", "–ü–ª–∞–≥–∏–Ω—ã"),
        ("r", "refresh_all", "–û–±–Ω–æ–≤–∏—Ç—å"),
        ("l", "load_model", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"),
    ]
    
    # Reactive –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    model_loaded = reactive(False)
    training_in_progress = reactive(False)
    plugins_loaded = reactive(False)
    
    def __init__(self):
        super().__init__()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
        self.model_engine = TuxModelEngine()
        self.fallback_model = SimpleFallbackModel()
        self.file_manager = FileManager()
        self.training_system = TrainingSystem(self.model_engine)
        self.memory_system = MemorySystem()
        self.plugin_manager = PluginManager()
        
        self.current_model = self.fallback_model
        self.chat_history = []
        self.current_session_id = f"session_{int(asyncio.get_event_loop().time())}"
    
    def compose(self) -> ComposeResult:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        yield Header()
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
        yield Container(
            Horizontal(
                PluginStatus(classes="status-widget"),
                MemoryStatus(classes="status-widget"),
                id="status_panel"
            )
        )
        
        with TabbedContent(initial="chat"):
            # –í–∫–ª–∞–¥–∫–∞ —á–∞—Ç–∞
            with TabPane("üí¨ –ß–∞—Ç", id="chat"):
                yield Container(
                    ScrollableContainer(
                        RichLog(id="chat_messages", classes="chat-container"),
                    ),
                    Horizontal(
                        Input(
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å...", 
                            id="user_input"
                        ),
                        Button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", variant="primary", id="send_button"),
                        Button("üß† –ò—Å–ø. –ø–∞–º—è—Ç—å", id="use_memory"),
                        id="input_container"
                    ),
                    id="chat_tab"
                )
            
            # –í–∫–ª–∞–¥–∫–∞ —Ñ–∞–π–ª–æ–≤
            with TabPane("üìÅ –§–∞–π–ª—ã", id="files"):
                yield Container(
                    Label("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", classes="section-title"),
                    Horizontal(
                        Button("üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ", id="upload_demo", variant="primary"),
                        Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", id="refresh_files"),
                        Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", id="clear_files", variant="error"),
                        id="file_actions"
                    ),
                    RichLog(id="upload_log", classes="log-container"),
                    Label("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", classes="section-title"),
                    ListView(id="file_list"),
                    Horizontal(
                        Button("üéì –û–±—É—á–∏—Ç—å—Å—è –Ω–∞ —Ñ–∞–π–ª–∞—Ö", id="train_on_files", variant="success"),
                        Button("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", id="view_file"),
                        id="file_training_actions"
                    ),
                    id="files_tab"
                )
            
            # –í–∫–ª–∞–¥–∫–∞ –æ–±—É—á–µ–Ω–∏—è
            with TabPane("üéì –û–±—É—á–µ–Ω–∏–µ", id="training"):
                yield Container(
                    Label("üåê –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–¥–∞–Ω–Ω—ã—Ö", classes="section-title"),
                    Input(placeholder="–¢–µ–º–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...", id="training_query"),
                    Horizontal(
                        Button("üîç –ù–∞–π—Ç–∏ –∏ –æ–±—É—á–∏—Ç—å", variant="success", id="train_internet"),
                        Button("üîÑ –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è", id="training_history"),
                        id="internet_training"
                    ),
                    
                    Label("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—å—é", classes="section-title"),
                    Horizontal(
                        Button("üß† –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å", id="load_model", variant="primary"),
                        Button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", id="save_model"),
                        id="model_actions"
                    ),
                    
                    ProgressBar(total=100, show_eta=False, id="training_progress"),
                    RichLog(id="training_log", classes="log-container"),
                    id="training_tab"
                )
            
            # –í–∫–ª–∞–¥–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
            with TabPane("üîå –ü–ª–∞–≥–∏–Ω—ã", id="plugins"):
                yield Container(
                    Label("üîå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞–º–∏", classes="section-title"),
                    Horizontal(
                        Button("üîç –û–±–Ω–∞—Ä—É–∂–∏—Ç—å", id="discover_plugins", variant="primary"),
                        Button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ", id="load_all_plugins"),
                        Button("üìã –°—Ç–∞—Ç—É—Å", id="plugins_status"),
                        id="plugin_actions"
                    ),
                    RichLog(id="plugins_log", classes="log-container"),
                    Label("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã", classes="section-title"),
                    ListView(id="plugins_list"),
                    Horizontal(
                        Button("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å", id="enable_plugin", variant="success"),
                        Button("‚èπÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å", id="disable_plugin"),
                        Button("‚öôÔ∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å", id="execute_plugin", variant="warning"),
                        id="plugin_controls"
                    ),
                    id="plugins_tab"
                )
            
            # –í–∫–ª–∞–¥–∫–∞ –ø–∞–º—è—Ç–∏
            with TabPane("üß† –ü–∞–º—è—Ç—å", id="memory"):
                yield Container(
                    Label("üß† –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏", classes="section-title"),
                    Horizontal(
                        Button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", id="memory_stats"),
                        Button("üîç –ü–æ–∏—Å–∫", id="memory_search"),
                        Button("üßπ –û—á–∏—Å—Ç–∫–∞", id="memory_cleanup", variant="error"),
                        id="memory_actions"
                    ),
                    Input(placeholder="–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏...", id="memory_query"),
                    RichLog(id="memory_log", classes="log-container"),
                    DataTable(id="memory_table"),
                    id="memory_tab"
                )
            
            # –í–∫–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            with TabPane("‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞", id="system"):
                yield Container(
                    Markdown("""
# üêß TUX AI System

## –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:
- **–ú–æ–¥–µ–ª—å –ò–ò:** {"–ó–∞–≥—Ä—É–∂–µ–Ω–∞" if self.model_loaded else "–î–µ–º–æ-—Ä–µ–∂–∏–º"}
- **–ü–ª–∞–≥–∏–Ω—ã:** {"–ó–∞–≥—Ä—É–∂–µ–Ω—ã" if self.plugins_loaded else "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}
- **–ü–∞–º—è—Ç—å:** –ê–∫—Ç–∏–≤–Ω–∞
- **–§–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** 0
- **–°–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏—è:** 0

## –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- üîå **–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≥–∏–Ω–æ–≤** - —Ä–∞—Å—à–∏—Ä—è–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- üß† **–î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å** - –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- üîç **–í–µ–±-–ø–æ–∏—Å–∫** - –¥–æ—Å—Ç—É–ø –∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- üíª **–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞** - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–¥–æ–º
- üìä **–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π** - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è

## –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:
- **Q** - –í—ã—Ö–æ–¥
- **D** - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã  
- **F** - –§–∞–π–ª—ã
- **T** - –û–±—É—á–µ–Ω–∏–µ
- **C** - –ß–∞—Ç
- **P** - –ü–ª–∞–≥–∏–Ω—ã
- **R** - –û–±–Ω–æ–≤–∏—Ç—å
- **L** - –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
2. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–ª–∞–≥–∏–Ω—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–º—è—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
4. –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                    """),
                    id="system_tab"
                )
        
        yield Footer()
    
    def on_mount(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        self.title = "üêß TUX AI - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –õ–æ–∫–∞–ª—å–Ω–∞—è –ò–ò –°–∏—Å—Ç–µ–º–∞"
        self.sub_title = "–ü–ª–∞–≥–∏–Ω—ã ‚Ä¢ –ü–∞–º—è—Ç—å ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        self._initialize_system()
    
    def _initialize_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        log = self.query_one("#upload_log", RichLog)
        log.write("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TUX AI...")
        log.write("‚úÖ TUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω")
        log.write("üìÅ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
        log.write("üéì –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
        self._load_plugins()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
        self._update_file_list()
        self._update_plugins_list()
        
        log.write("üêß –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    def _load_plugins(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤"""
        plugins_log = self.query_one("#plugins_log", RichLog)
        plugins_log.write("üîå –ó–∞–≥—Ä—É–∂–∞—é –ø–ª–∞–≥–∏–Ω—ã...")
        
        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã
        discovered = self.plugin_manager.discover_plugins()
        plugins_log.write(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞–≥–∏–Ω–æ–≤: {len(discovered)}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã
        core_plugins = ['web_search', 'code_analyzer']
        loaded_count = 0
        
        for plugin_name in core_plugins:
            if plugin_name in discovered:
                if self.plugin_manager.load_plugin(plugin_name):
                    loaded_count += 1
                    plugins_log.write(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {plugin_name}")
                else:
                    plugins_log.write(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {plugin_name}")
        
        self.plugins_loaded = loaded_count > 0
        plugins_log.write(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–ª–∞–≥–∏–Ω–æ–≤: {loaded_count}/{len(core_plugins)}")
    
    def _update_file_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        file_list = self.query_one("#file_list", ListView)
        file_list.clear()
        
        files = self.file_manager.list_files()
        for file_info in files:
            status = "‚úÖ" if file_info['used_in_training'] else "üìÑ"
            file_item = ListItem(
                Label(f"{status} {file_info['name']} ({file_info['size']} bytes)"),
                id=f"file_{file_info['id']}"
            )
            file_list.append(file_item)
    
    def _update_plugins_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤"""
        plugins_list = self.query_one("#plugins_list", ListView)
        plugins_list.clear()
        
        for plugin_name, plugin in self.plugin_manager.plugins.items():
            status = "üü¢" if plugin.enabled else "üî¥"
            plugin_item = ListItem(
                Label(f"{status} {plugin_name} v{plugin.version}"),
                id=f"plugin_{plugin_name}"
            )
            plugins_list.append(plugin_item)
    
    @on(Button.Pressed, "#send_button")
    @on(Input.Submitted, "#user_input")
    def on_send_message(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_input = self.query_one("#user_input", Input)
        message = user_input.value.strip()
        
        if not message:
            return
        
        user_input.value = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_log = self.query_one("#chat_messages", RichLog)
        chat_log.write(f"üë§ [bold cyan]–í—ã:[/bold cyan] {message}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        self._generate_ai_response(message)
    
    @work
    async def _generate_ai_response(self, prompt: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏"""
        chat_log = self.query_one("#chat_messages", RichLog)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä thinking
        thinking_id = f"thinking_{len(self.chat_history)}"
        chat_log.write(f"üêß [bold green]Tux AI:[/bold green] [italic]–¥—É–º–∞–µ—Ç...[/italic]", id=thinking_id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏
            context = ""
            relevant_memories = self.memory_system.get_relevant_context(prompt, limit=3)
            
            if relevant_memories:
                context = "\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤:\n"
                for memory in relevant_memories:
                    context += f"- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {memory['user_message']}\n"
                    context += f"- Tux AI: {memory['ai_response']}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –ø—Ä–æ–º–ø—Ç—É
            enhanced_prompt = f"{context}–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {prompt}"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (–≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ)
            response = await asyncio.to_thread(
                self.current_model.generate_response, 
                enhanced_prompt,
                max_length=200,
                temperature=0.7
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            self.memory_system.save_conversation(
                self.current_session_id,
                prompt,
                response,
                importance=1
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç
            chat_log.remove(thinking_id)
            chat_log.write(f"üêß [bold green]Tux AI:[/bold green] {response}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.chat_history.append({
                "user": prompt,
                "ai": response,
                "timestamp": asyncio.get_event_loop().time()
            })
            
        except Exception as e:
            chat_log.remove(thinking_id)
            chat_log.write(f"‚ùå [bold red]–û—à–∏–±–∫–∞:[/bold red] {str(e)}")
    
    @on(Button.Pressed, "#use_memory")
    def on_use_memory(self):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
        chat_log = self.query_one("#chat_messages", RichLog)
        user_input = self.query_one("#user_input", Input)
        prompt = user_input.value.strip()
        
        if not prompt:
            self.notify("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏")
            return
        
        # –ò—â–µ–º –≤ –ø–∞–º—è—Ç–∏
        memories = self.memory_system.get_relevant_context(prompt, limit=5)
        
        if memories:
            chat_log.write("üß† –ù–∞–π–¥–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏:")
            for i, memory in enumerate(memories, 1):
                chat_log.write(f"{i}. Q: {memory['user_message'][:50]}...")
                chat_log.write(f"   A: {memory['ai_response'][:50]}...")
        else:
            chat_log.write("üß† –í –ø–∞–º—è—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    
    @on(Button.Pressed, "#discover_plugins")
    def on_discover_plugins(self):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤"""
        plugins_log = self.query_one("#plugins_log", RichLog)
        discovered = self.plugin_manager.discover_plugins()
        plugins_log.write(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–ª–∞–≥–∏–Ω–æ–≤: {len(discovered)}")
        for plugin in discovered:
            plugins_log.write(f"üì¶ {plugin}")
        
        self._update_plugins_list()
    
    @on(Button.Pressed, "#load_all_plugins")
    def on_load_all_plugins(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤"""
        plugins_log = self.query_one("#plugins_log", RichLog)
        discovered = self.plugin_manager.discover_plugins()
        loaded_count = 0
        
        for plugin_name in discovered:
            if plugin_name not in self.plugin_manager.plugins:
                if self.plugin_manager.load_plugin(plugin_name):
                    loaded_count += 1
                    plugins_log.write(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {plugin_name}")
                else:
                    plugins_log.write(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {plugin_name}")
        
        plugins_log.write(f"üéØ –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {loaded_count}")
        self._update_plugins_list()
        self.plugins_loaded = loaded_count > 0
    
    @on(Button.Pressed, "#enable_plugin")
    def on_enable_plugin(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞"""
        plugins_list = self.query_one("#plugins_list", ListView)
        if plugins_list.index is not None:
            selected_item = plugins_list.children[plugins_list.index]
            plugin_name = selected_item.id.replace("plugin_", "")
            
            if plugin_name in self.plugin_manager.plugins:
                self.plugin_manager.plugins[plugin_name].enabled = True
                self.plugin_manager.plugins[plugin_name].on_enable()
                self._update_plugins_list()
                self.notify(f"‚úÖ –ü–ª–∞–≥–∏–Ω {plugin_name} –≤–∫–ª—é—á–µ–Ω")
    
    @on(Button.Pressed, "#execute_plugin")
    @work
    async def on_execute_plugin(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞"""
        plugins_list = self.query_one("#plugins_list", ListView)
        plugins_log = self.query_one("#plugins_log", RichLog)
        
        if plugins_list.index is not None:
            selected_item = plugins_list.children[plugins_list.index]
            plugin_name = selected_item.id.replace("plugin_", "")
            
            if (plugin_name in self.plugin_manager.plugins and 
                self.plugin_manager.plugins[plugin_name].enabled):
                
                plugin = self.plugin_manager.plugins[plugin_name]
                capabilities = plugin.get_capabilities()
                
                plugins_log.write(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è—é –ø–ª–∞–≥–∏–Ω: {plugin_name}")
                plugins_log.write(f"üìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {', '.join(capabilities)}")
                
                # –î–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–º–æ-–ø–æ–∏—Å–∫
                if plugin_name == "WebSearch" and "web_search" in capabilities:
                    try:
                        result = await plugin.execute("web_search", query="Tux AI –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç")
                        plugins_log.write("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
                        for i, item in enumerate(result[:3], 1):
                            plugins_log.write(f"{i}. {item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    except Exception as e:
                        plugins_log.write(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                
                # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
                elif plugin_name == "CodeAnalyzer" and "analyze_python_code" in capabilities:
                    demo_code = """
def calculate_sum(a, b):
    return a + b

class MathOperations:
    def multiply(self, x, y):
        return x * y
"""
                    result = plugin.execute("analyze_python_code", code=demo_code)
                    if result and result.get('valid'):
                        plugins_log.write(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞: {result['functions']} —Ñ—É–Ω–∫—Ü–∏–π, {result['classes']} –∫–ª–∞—Å—Å–æ–≤")
    
    @on(Button.Pressed, "#memory_stats")
    def on_memory_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏"""
        memory_log = self.query_one("#memory_log", RichLog)
        profile = self.memory_system.get_user_profile()
        
        memory_log.write("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏:")
        memory_log.write(f"üí¨ –†–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {profile['statistics']['total_conversations']}")
        memory_log.write(f"üìö –¢–µ–º: {profile['statistics']['unique_topics']}")
        memory_log.write(f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {profile['statistics']['last_active']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        if profile['preferences']:
            memory_log.write("üéØ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            for pref_type, pref_data in profile['preferences'].items():
                memory_log.write(f"  - {pref_type}: {pref_data['value']} (—Å–∏–ª–∞: {pref_data['strength']:.2f})")
    
    @on(Button.Pressed, "#memory_search")
    @on(Input.Submitted, "#memory_query")
    def on_memory_search(self):
        """–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏"""
        memory_query = self.query_one("#memory_query", Input)
        query = memory_query.value.strip()
        memory_log = self.query_one("#memory_log", RichLog)
        memory_table = self.query_one("#memory_table", DataTable)
        
        if not query:
            self.notify("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return
        
        memories = self.memory_system.get_relevant_context(query, limit=10)
        memory_log.write(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(memories)}")
        
        # –û—á–∏—â–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        memory_table.clear(columns=True)
        memory_table.add_columns("–°—Ö–æ–¥—Å—Ç–≤–æ", "–í–æ–ø—Ä–æ—Å", "–û—Ç–≤–µ—Ç", "–¢–µ–º–∞")
        
        for memory in memories:
            memory_table.add_row(
                f"{memory['similarity']:.3f}",
                memory['user_message'][:50] + "...",
                memory['ai_response'][:50] + "...", 
                memory['topic'] or "–ë–µ–∑ —Ç–µ–º—ã"
            )
    
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (on_upload_demo_file, on_load_model, on_train_internet, etc.)
    # –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏
    
    def action_focus_plugins(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–ª–∞–≥–∏–Ω–æ–≤"""
        self.query_one(TabbedContent).active = "plugins"
        self.notify("üîå –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø–ª–∞–≥–∏–Ω—ã")
    
    def action_refresh_all(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.notify("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–∏—Å—Ç–µ–º—É...")
        self._initialize_system()

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        app = AdvancedTuxAITUI()
        app.run()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîß –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_environment.py")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ")

if __name__ == "__main__":
    main()