#!/usr/bin/env python3
"""
üêß TUX AI - –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞
"""

import os
import sys
import subprocess
from pathlib import Path

def ensure_venv():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    venv_path = Path(__file__).parent / "tux_ai_venv"
    
    # –ï—Å–ª–∏ —É–∂–µ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        return True
    
    # –ï—Å–ª–∏ venv —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
    if venv_path.exists():
        print("üîß –ê–∫—Ç–∏–≤–∏—Ä—É—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ...")
        
        if sys.platform == "win32":
            python_path = venv_path / "Scripts" / "python.exe"
        else:
            python_path = venv_path / "bin" / "python"
        
        if python_path.exists():
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
            os.execv(str(python_path), [str(python_path)] + sys.argv)
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
            return False
    else:
        print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./install_tux_ai.sh")
        return False
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üêß TUX AI - –õ–æ–∫–∞–ª—å–Ω–∞—è –ò–ò –°–∏—Å—Ç–µ–º–∞")
    print("=" * 50)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:")
    print("1. üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å (1000 –Ω–µ–π—Ä–æ–Ω–æ–≤)")
    print("2. üí¨ –ë–∞–∑–æ–≤—ã–π TUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å") 
    print("3. üîå –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏")
    print("4. üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not ensure_venv():
        sys.exit(1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å Python
    src_path = Path(__file__).parent / "src"
    if str(src_path) not in sys.path:
        sys.path.insert(0, str(src_path))
    
    try:
        if choice == "1":
            from src.tui.neural_tui import NeuralTuxTUI
            print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å Tux AI...")
            app = NeuralTuxTUI()
            app.run()
            
        elif choice == "2":
            from src.tui.main_tui import SimpleTuxAITUI
            print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–∞–∑–æ–≤—ã–π TUI...")
            app = SimpleTuxAITUI()
            app.run()
            
        elif choice == "3":
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            from src.tui.main_tui import SimpleTuxAITUI
            print("üöÄ –ó–∞–ø—É—Å–∫–∞—é TUX AI...")
            app = SimpleTuxAITUI()
            app.run()
            
        elif choice == "4":
            from src.core.tux_neural_network import demonstrate_tux_ai
            demonstrate_tux_ai()
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å–∫–∞—é –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é...")
            from src.tui.main_tui import SimpleTuxAITUI
            app = SimpleTuxAITUI()
            app.run()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("\nüîß –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É: ./install_tux_ai.sh")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PyTorch: pip install torch")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞")

if __name__ == "__main__":
    main()