#!/bin/bash
# TUX AI - –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –¥–ª—è Arch Linux

echo "üêß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TUX AI –Ω–∞ Arch Linux..."
echo "==========================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞: sudo pacman -S python"
    sudo pacman -S python --noconfirm
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
sudo pacman -S --noconfirm \
    python-pip \
    python-virtualenv \
    tesseract \
    tesseract-data-eng \
    tesseract-data-rus \
    poppler \
    git \
    base-devel

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "üêç –°–æ–∑–¥–∞—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
python -m venv tux_ai_venv

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è venv
echo "üîß –ê–∫—Ç–∏–≤–∏—Ä—É—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
source tux_ai_venv/bin/activate

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip –≤–Ω—É—Ç—Ä–∏ venv
echo "üîÑ –û–±–Ω–æ–≤–ª—è—é pip..."
pip install --upgrade pip

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
echo "üìÅ –°–æ–∑–¥–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞..."
mkdir -p tux-ai-project/{src/{core,tui,plugins,api,utils},data/{models,uploads,training,memory,plugins},logs,tests}
cd tux-ai-project

# –°–æ–∑–¥–∞–Ω–∏–µ __init__.py —Ñ–∞–π–ª–æ–≤
touch src/__init__.py
touch src/core/__init__.py
touch src/tui/__init__.py
touch src/plugins/__init__.py
touch src/api/__init__.py
touch src/utils/__init__.py

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (—ç—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—Ä—É—á–Ω—É—é)
echo "üìã –ö–æ–ø–∏—Ä—É—é —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞..."

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
cat > LAUNCH.py << 'EOF'
#!/usr/bin/env python3
"""
üêß TUX AI - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –¥–ª—è Arch Linux
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
"""

import os
import sys
import subprocess
from pathlib import Path

def ensure_venv():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    venv_path = Path(__file__).parent / "tux_ai_venv"
    
    # –ï—Å–ª–∏ —É–∂–µ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        return True
    
    # –ï—Å–ª–∏ venv —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
    if venv_path.exists():
        print("üîß –ê–∫—Ç–∏–≤–∏—Ä—É—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ...")
        
        if sys.platform == "win32":
            python_path = venv_path / "Scripts" / "python.exe"
        else:
            python_path = venv_path / "bin" / "python"
        
        if python_path.exists():
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
            os.execv(str(python_path), [str(python_path)] + sys.argv)
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
            return False
    else:
        print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./install_tux_ai.sh")
        return False
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üêß TUX AI - –õ–æ–∫–∞–ª—å–Ω–∞—è –ò–ò –°–∏—Å—Ç–µ–º–∞")
    print("===========================================")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not ensure_venv():
        sys.exit(1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å Python
    src_path = Path(__file__).parent / "src"
    if str(src_path) not in sys.path:
        sys.path.insert(0, str(src_path))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
    try:
        from src.tui.main_tui import SimpleTuxAITUI
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—é TUX AI...")
        
        app = SimpleTuxAITUI()
        app.run()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("\nüîß –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É: ./install_tux_ai.sh")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")

if __name__ == "__main__":
    main()
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ TUI –¥–ª—è –Ω–∞—á–∞–ª–∞
cat > src/tui/main_tui.py << 'EOF'
"""
–ü—Ä–æ—Å—Ç–æ–π TUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Tux AI –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
"""

import sys
from pathlib import Path

try:
    from textual import on
    from textual.app import App, ComposeResult
    from textual.containers import Container, ScrollableContainer, Horizontal
    from textual.widgets import Header, Footer, Input, Button, Static, Markdown, TabbedContent, TabPane, Label, RichLog
    from textual.reactive import reactive
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üì¶ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É: ./install_tux_ai.sh")
    sys.exit(1)

class SimpleTuxAITUI(App):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π TUX AI TUI –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞"""
    
    CSS = """
    Screen {
        background: #121212;
        color: #e0e0e0;
    }
    
    Header {
        background: #000000;
        color: #4caf50;
        text-style: bold;
        border-bottom: heavy #4caf50;
    }
    
    Footer {
        background: #000000;
        border-top: heavy #4caf50;
    }
    
    TabPane {
        padding: 1;
    }
    
    .section-title {
        text-style: bold;
        color: #ff4081;
        margin: 1 0;
        padding: 1;
        background: #4caf50 10%;
        border: solid #4caf50;
    }
    
    .log-container {
        height: 15;
        border: solid #2196f3;
        background: #1e1e1e;
        padding: 1;
        margin: 1 0;
    }
    
    Button {
        margin: 0 1;
    }
    
    Button:focus {
        border: double #4caf50;
    }
    
    Input {
        width: 1fr;
        margin-right: 1;
        background: #1e1e1e;
        border: solid #4caf50;
    }
    """
    
    BINDINGS = [("q", "quit", "–í—ã—Ö–æ–¥"), ("d", "toggle_dark", "–¢–µ–º–∞")]

    def compose(self) -> ComposeResult:
        yield Header()
        
        with TabbedContent():
            with TabPane("üöÄ –°—Ç–∞—Ä—Ç", id="start"):
                yield Container(
                    Markdown("""
# üêß TUX AI –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!

## ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ

### –ß—Ç–æ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:
- üêç –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
- üé® TUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å  
- üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
- üîß –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò** - –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–ú–æ–¥–µ–ª—å"
2. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∞—Ç** - –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò
3. **–ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏** - –æ–±—É—á–µ–Ω–∏–µ, —Ñ–∞–π–ª—ã, –ø–ª–∞–≥–∏–Ω—ã

### –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:
- **Q** - –í—ã—Ö–æ–¥
- **D** - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã

üêß **–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TUX AI!**
                    """),
                    id="start_tab"
                )
            
            with TabPane("üí¨ –ß–∞—Ç", id="chat"):
                yield Container(
                    ScrollableContainer(
                        RichLog(id="chat_messages", classes="log-container"),
                    ),
                    Horizontal(
                        Input(placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å...", id="user_input"),
                        Button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", variant="primary", id="send_button"),
                        id="input_container"
                    ),
                    id="chat_tab"
                )
            
            with TabPane("üß† –ú–æ–¥–µ–ª—å", id="model"):
                yield Container(
                    Label("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏", classes="section-title"),
                    RichLog(id="model_log", classes="log-container"),
                    Horizontal(
                        Button("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å", id="load_model", variant="primary"),
                        Button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", id="check_model"),
                        id="model_actions"
                    ),
                    id="model_tab"
                )
            
            with TabPane("‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", id="system"):
                yield Container(
                    Markdown("""
## –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

**–û–°:** Arch Linux
**Python:** –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
**–°—Ç–∞—Ç—É—Å:** ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ

### –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- üí¨ –ß–∞—Ç —Å –ò–ò
- üß† –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
- üìÅ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
- üéì –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
- üîå –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≥–∏–Ω–æ–≤

### –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
- `tux_ai_venv/` - –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
- `src/` - –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
- `data/` - –¥–∞–Ω–Ω—ã–µ –∏ –º–æ–¥–µ–ª–∏
- `logs/` - –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ:
`./install_tux_ai.sh`
                    """),
                    id="system_tab"
                )
        
        yield Footer()
    
    def on_mount(self) -> None:
        self.title = "üêß TUX AI - Arch Linux Edition"
        self.sub_title = "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        log = self.query_one("#model_log", RichLog)
        log.write("‚úÖ TUX AI —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        log.write("üêç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        log.write("üì¶ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        log.write("üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    @on(Button.Pressed, "#send_button")
    @on(Input.Submitted, "#user_input")
    def on_send_message(self):
        user_input = self.query_one("#user_input", Input)
        message = user_input.value.strip()
        
        if not message:
            return
        
        user_input.value = ""
        
        chat_log = self.query_one("#chat_messages", RichLog)
        chat_log.write(f"üë§ –í—ã: {message}")
        
        # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        responses = [
            "–ü—Ä–∏–≤–µ—Ç! –Ø Tux AI. üêß",
            "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —è —Å–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –ª—É—á—à–µ.",
            "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ Arch Linux!",
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.",
            "TUX AI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É '–ú–æ–¥–µ–ª—å'."
        ]
        
        import random
        response = random.choice(responses)
        chat_log.write(f"üêß Tux AI: {response}")
    
    @on(Button.Pressed, "#load_model")
    def on_load_model(self):
        log = self.query_one("#model_log", RichLog)
        log.write("üß† –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏...")
        log.write("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        import time
        import asyncio
        
        async def simulate_install():
            steps = [
                "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch...",
                "–ó–∞–≥—Ä—É–∑–∫–∞ transformers...",
                "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...",
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...",
                "‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
            ]
            
            for step in steps:
                await asyncio.sleep(1)
                log.write(step)
        
        asyncio.create_task(simulate_install())

if __name__ == "__main__":
    app = SimpleTuxAITUI()
    app.run()
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ requirements.txt
cat > requirements.txt << 'EOF'
# –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
torch>=2.0.1
transformers>=4.31.0
textual>=0.34.0
rich>=13.5.0

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
aiohttp>=3.8.5
requests>=2.31.0
numpy>=1.24.3
scikit-learn>=1.3.0
beautifulsoup4>=4.12.0
Pillow>=10.0.0
tqdm>=4.65.0
EOF

echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏..."
pip install -r requirements.txt

# –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
chmod +x LAUNCH.py
chmod +x ../install_tux_ai.sh

echo ""
echo "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "==========================================="
echo "üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
echo "   cd tux-ai-project"
echo "   python LAUNCH.py"
echo ""
echo "üìñ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "   ./LAUNCH.py"
echo ""
echo "üêß –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TUX AI!"
EOF

### 2. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (`start_tux_ai.sh`)

```bash
#!/bin/bash
# TUX AI - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è Arch Linux

echo "üêß –ó–∞–ø—É—Å–∫ TUX AI..."
cd "$(dirname "$0")"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ ! -d "tux_ai_venv" ]; then
    echo "‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    echo "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É: ./install_tux_ai.sh"
    exit 1
fi

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
source tux_ai_venv/bin/activate

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
if ! python -c "import textual" 2>/dev/null; then
    echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    pip install -r requirements.txt
fi

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo "üöÄ –ó–∞–ø—É—Å–∫–∞—é TUX AI..."
python LAUNCH.py