#!/usr/bin/env python3
"""
–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Tux AI –¥–ª—è Arch Linux
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É externally-managed-environment
"""

import os
import sys
import subprocess
from pathlib import Path

def run_command(command, check=True):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ shell"""
    print(f"üöÄ –í—ã–ø–æ–ª–Ω—è—é: {command}")
    try:
        result = subprocess.run(command, shell=True, check=check, 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ –£—Å–ø–µ—Ö")
        return result
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def install_system_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Arch Linux"""
    print("üêß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è Arch Linux...")
    
    commands = [
        "sudo pacman -S --noconfirm python-pip",
        "sudo pacman -S --noconfirm tesseract",
        "sudo pacman -S --noconfirm tesseract-data-rus",
        "sudo pacman -S --noconfirm poppler",
        "sudo pacman -S --noconfirm python-virtualenv"
    ]
    
    for cmd in commands:
        if run_command(cmd) is None:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é: {cmd}")

def create_project_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üìÅ –°–æ–∑–¥–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")
    
    directories = [
        "src/tui",
        "data/models", 
        "data/uploads",
        "logs"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞: {directory}")
    
    # –°–æ–∑–¥–∞–µ–º __init__.py —Ñ–∞–π–ª—ã
    init_files = ["src/__init__.py", "src/tui/__init__.py"]
    for init_file in init_files:
        with open(init_file, 'w') as f:
            f.write('"""Package initialization"""\n')
        print(f"üìÑ –°–æ–∑–¥–∞–Ω: {init_file}")

def setup_virtual_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üêç –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ...")
    
    venv_path = Path("venv")
    if venv_path.exists():
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    result = run_command(f"{sys.executable} -m venv venv")
    if result is None or result.returncode != 0:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        return False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ pip –≤ venv
    if sys.platform == "win32":
        pip_path = venv_path / "Scripts" / "pip.exe"
    else:
        pip_path = venv_path / "bin" / "pip"
    
    if not pip_path.exists():
        print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return False
    
    print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    return str(pip_path)

def install_python_dependencies(pip_path):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pip –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    run_command(f"{pip_path} install --upgrade pip")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if Path("requirements.txt").exists():
        result = run_command(f"{pip_path} install -r requirements.txt")
    else:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        deps = [
            "torch", 
            "transformers",
            "textual",
            "rich", 
            "fastapi",
            "uvicorn",
            "aiohttp",
            "requests"
        ]
        for dep in deps:
            print(f"üì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {dep}...")
            run_command(f"{pip_path} install {dep}")
    
    print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("üêß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tux AI –¥–ª—è Arch Linux")
    print("=" * 50)
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    install_system_dependencies()
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    create_project_structure()
    
    # –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    pip_path = setup_virtual_environment()
    if not pip_path:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        return
    
    # Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    install_python_dependencies(pip_path)
    
    print("\nüéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:")
    print("   python LAUNCH.py")
    print("\nüìñ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç:")
    print("   chmod +x start_linux.sh && ./start_linux.sh")

if __name__ == "__main__":
    main()